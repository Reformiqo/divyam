[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-03-31 10:08:28.410026",
  "module": "Divyam",
  "name": "Purchase Receipt Client",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t  frm.set_query(\"custom_select_item\",() => {\n\t      return {filters:{\n\t\t\t\t\"has_batch_no\":1\n\t\t\t}}\n\t  })\n\t},\n\tcustom_update_items(frm) {\n\t    console.log(frm.doc.custom_total_batches, frm.doc.custom_select_item)\n\t    if (frm.doc.custom_total_batches && frm.doc.custom_select_item) {\n    \t    if (frm.doc.items.length){\n    \t        frm.doc.items.pop()\n    \t        frm.refresh_field(\"items\")\n    \t    }\n\t        for (let i=0;i<frm.doc.custom_total_batches;i++) {\n\t            frm.add_child(\"items\",{\"item_code\":frm.doc.custom_select_item})\n\t            let item = frm.doc.items[i]\n\t            frm.script_manager.trigger(\"item_code\",item.doctype, item.name)\n\t            \n\t        }\n\t        frm.refresh_field(\"items\")\n\t    }\n\t}\n\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2024-06-01 12:13:52.155517",
  "module": "Divyam",
  "name": "Get Items From",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    refresh(frm) {\n        if (!frm.doc.is_return && frm.doc.status != \"Closed\") {\n            if (frm.doc.docstatus == 0) {\n                frm.add_custom_button(\n                    __(\"Purchase Order\"),\n                    function () {\n                        if (!frm.doc.supplier) {\n\t\t\t\t\t\tfrappe.throw({\n\t\t\t\t\t\t\ttitle: __(\"Mandatory\"),\n\t\t\t\t\t\t\tmessage: __(\"Please Select a Supplier\"),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n                        let d = new frappe.ui.form.MultiSelectDialog({\n                            doctype: \"Purchase Order\",\n                            target: frm,\n                            setters: {\n                               supplier: frm.doc.supplier,\n                               schedule_date: null\n                            },\n                            add_filters_group: 1,\n                            date_field: \"transaction_date\",\n                            child_fieldname: \"items\", \n                            child_columns: [\"item_code\", \"qty\"],\n                            get_query() {\n                                return {\n                                    filters: { \n                                        docstatus: 1,\n\t\t\t\t\t\t\t            per_received: [\"<\", 100],\n\t\t\t\t\t\t\t            company: frm.doc.company,\n                                        }\n                                };\n                            },\n                            action(selections) {\n                                console.log(selections); // list of selected item names\n    }\n                        });\n                        d.show();\n                    },\n                    __(\"Fetch Items From\")\n                );\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-06-03 07:45:39.250270",
  "module": "Divyam",
  "name": "Purchase Invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh(frm) {\n        if (!frm.doc.is_return && frm.doc.status != \"Closed\") {\n            if (frm.doc.docstatus == 0) {\n                frm.add_custom_button(\n                   __(\"Purchase Receipt\"),\n\t\t\t\tfunction () {\n\t\t\t\t\terpnext.utils.map_current_doc({\n\t\t\t\t\t\tmethod: \"divyam.utils.make_purchase_invoice\",\n\t\t\t\t\t\tsource_doctype: \"Purchase Receipt\",\n\t\t\t\t\t\ttarget: frm,\n\t\t\t\t\t\tsetters: {\n\t\t\t\t\t\t\tsupplier: frm.doc.supplier || undefined,\n\t\t\t\t\t\t\tposting_date: undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget_query_filters: {\n\t\t\t\t\t\t\tdocstatus: 1,\n\t\t\t\t\t\t\tstatus: [\"not in\", [\"Closed\", \"Completed\", \"Return Issued\"]],\n\t\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\t\tis_return: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\taction(selections){\n\t\t\t\t\t\t    console.log(selections)\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t__(\"Fetch Items From\")\n\t\t\t);\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-07-02 18:32:06.383913",
  "module": "Divyam",
  "name": "Sales Invoice naming",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n    refresh: function(frm) {\n        if (frm.is_new()) {\n            frm.trigger(\"naming_series\");\n        }\n    },\n\n    company: function(frm) {\n        if (frm.is_new()) {\n            frm.trigger(\"naming_series\");\n        }\n    },\n\n    is_return: function(frm) {\n        if (frm.is_new()) {\n            frm.trigger(\"naming_series\");\n        }\n    },\n\n    naming_series: function(frm) {\n        if (frm.doc.is_return == 1) {\n            // frm.set_df_property(\"naming_series\", \"read_only\", 1);\n            if (frm.doc.company == \"Doeraa Private Limited\") {\n                frm.set_value(\"naming_series\", \"CN-\");\n            } else {\n                frm.set_value(\"naming_series\", \"CRN-\");\n            }\n        } else {\n             if (frm.doc.company == \"Doeraa Private Limited\") {\n                frm.set_value(\"naming_series\", \"SIN\");\n            } else {\n                frm.set_value(\"naming_series\", \"SINV-.YY.-\");\n            }\n            \n            \n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Subcontracting Receipt",
  "enabled": 1,
  "modified": "2024-07-11 17:23:51.356199",
  "module": "Divyam",
  "name": "Subcontracting Receipt",
  "script": "// Copyright (c) 2022, Frappe Technologies Pvt. Ltd. and contributors\n// For license information, please see license.txt\n\nfrappe.provide(\"erpnext.buying\");\n\nerpnext.landed_cost_taxes_and_charges.setup_triggers(\"Subcontracting Receipt\");\n\nfrappe.ui.form.on(\"Subcontracting Receipt\", {\n\tsetup: (frm) => {\n\t\tfrm.ignore_doctypes_on_cancel_all = [\"Serial and Batch Bundle\"];\n\t\tfrm.get_field(\"supplied_items\").grid.cannot_add_rows = true;\n\t\tfrm.get_field(\"supplied_items\").grid.only_sortable();\n\t\tfrm.trigger(\"set_queries\");\n\n\t\tfrm.custom_make_buttons = {\n\t\t\t\"Purchase Receipt\": \"Purchase Receipt\",\n\t\t};\n\t},\n\n\ton_submit(frm) {\n\t\tfrm.events.refresh_serial_batch_bundle_field(frm);\n\t},\n\n\trefresh_serial_batch_bundle_field(frm) {\n\t\tfrappe.route_hooks.after_submit = (frm_obj) => {\n\t\t\tfrm_obj.reload_doc();\n\t\t};\n\t},\n\n\trefresh: (frm) => {\n\t\tif (frm.doc.docstatus === 1) {\n\t\t\tfrm.add_custom_button(\n\t\t\t\t__(\"Stock Ledger\"),\n\t\t\t\t() => {\n\t\t\t\t\tfrappe.route_options = {\n\t\t\t\t\t\tvoucher_no: frm.doc.name,\n\t\t\t\t\t\tfrom_date: frm.doc.posting_date,\n\t\t\t\t\t\tto_date: moment(frm.doc.modified).format(\"YYYY-MM-DD\"),\n\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\tshow_cancelled_entries: frm.doc.docstatus === 2,\n\t\t\t\t\t};\n\t\t\t\t\tfrappe.set_route(\"query-report\", \"Stock Ledger\");\n\t\t\t\t},\n\t\t\t\t__(\"View\")\n\t\t\t);\n\n\t\t\tfrm.add_custom_button(\n\t\t\t\t__(\"Accounting Ledger\"),\n\t\t\t\t() => {\n\t\t\t\t\tfrappe.route_options = {\n\t\t\t\t\t\tvoucher_no: frm.doc.name,\n\t\t\t\t\t\tfrom_date: frm.doc.posting_date,\n\t\t\t\t\t\tto_date: moment(frm.doc.modified).format(\"YYYY-MM-DD\"),\n\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\tgroup_by: \"Group by Voucher (Consolidated)\",\n\t\t\t\t\t\tshow_cancelled_entries: frm.doc.docstatus === 2,\n\t\t\t\t\t};\n\t\t\t\t\tfrappe.set_route(\"query-report\", \"General Ledger\");\n\t\t\t\t},\n\t\t\t\t__(\"View\")\n\t\t\t);\n\n\t\t\tif (frm.doc.is_return === 0) {\n\t\t\t\tfrm.add_custom_button(\n\t\t\t\t\t__(\"Purchase Receipt\"),\n\t\t\t\t\t() => {\n\t\t\t\t\t\tfrappe.model.open_mapped_doc({\n\t\t\t\t\t\t\tmethod: \"erpnext.subcontracting.doctype.subcontracting_receipt.subcontracting_receipt.make_purchase_receipt\",\n\t\t\t\t\t\t\tfrm: frm,\n\t\t\t\t\t\t\tfreeze: true,\n\t\t\t\t\t\t\tfreeze_message: __(\"Creating Purchase Receipt ...\"),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t__(\"Create\")\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!frm.doc.is_return && frm.doc.docstatus === 1 && frm.doc.per_returned < 100) {\n\t\t\tfrm.add_custom_button(\n\t\t\t\t__(\"Subcontract Return\"),\n\t\t\t\t() => {\n\t\t\t\t\tfrappe.model.open_mapped_doc({\n\t\t\t\t\t\tmethod: \"erpnext.subcontracting.doctype.subcontracting_receipt.subcontracting_receipt.make_subcontract_return\",\n\t\t\t\t\t\tfrm: frm,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t__(\"Create\")\n\t\t\t);\n\t\t\tfrm.page.set_inner_btn_group_as_primary(__(\"Create\"));\n\t\t}\n\n\t\tif (frm.doc.docstatus === 0) {\n\t\t\tfrm.add_custom_button(\n\t\t\t\t__(\"Subcontracting Order\"),\n\t\t\t\t() => {\n\t\t\t\t\tif (!frm.doc.supplier) {\n\t\t\t\t\t\tfrappe.throw({\n\t\t\t\t\t\t\ttitle: __(\"Mandatory\"),\n\t\t\t\t\t\t\tmessage: __(\"Please Select a Supplier\"),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\terpnext.utils.map_current_doc({\n\t\t\t\t\t\tmethod: \"erpnext.subcontracting.doctype.subcontracting_order.subcontracting_order.make_subcontracting_receipt\",\n\t\t\t\t\t\tsource_doctype: \"Subcontracting Order\",\n\t\t\t\t\t\ttarget: frm,\n\t\t\t\t\t\tsetters: {\n\t\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget_query_filters: {\n\t\t\t\t\t\t\tdocstatus: 1,\n\t\t\t\t\t\t\tper_received: [\"<\", 100],\n\t\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\t\tstatus: [\"!=\", \"Closed\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t__(\"Get Items From\")\n\t\t\t);\n\n\t\t\tfrm.fields_dict.supplied_items.grid.update_docfield_property(\n\t\t\t\t\"consumed_qty\",\n\t\t\t\t\"read_only\",\n\t\t\t\tfrm.doc.__onload && frm.doc.__onload.backflush_based_on === \"BOM\"\n\t\t\t);\n\t\t}\n\n\t\tfrm.trigger(\"setup_quality_inspection\");\n\t\tfrm.trigger(\"set_route_options_for_new_doc\");\n\t},\n\n\tset_warehouse: (frm) => {\n\t\tset_warehouse_in_children(frm.doc.items, \"warehouse\", frm.doc.set_warehouse);\n\t},\n\n\trejected_warehouse: (frm) => {\n\t\tset_warehouse_in_children(frm.doc.items, \"rejected_warehouse\", frm.doc.rejected_warehouse);\n\t},\n\n\tget_scrap_items: (frm) => {\n\t\tfrappe.call({\n\t\t\tdoc: frm.doc,\n\t\t\tmethod: \"get_scrap_items\",\n\t\t\targs: {\n\t\t\t\trecalculate_rate: true,\n\t\t\t},\n\t\t\tfreeze: true,\n\t\t\tfreeze_message: __(\"Getting Scrap Items\"),\n\t\t\tcallback: (r) => {\n\t\t\t\tif (!r.exc) {\n\t\t\t\t\tfrm.refresh();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t},\n\n\tset_queries: (frm) => {\n\t\tfrm.set_query(\"set_warehouse\", () => {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\tis_group: 0,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tfrm.set_query(\"rejected_warehouse\", () => {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\tis_group: 0,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tfrm.set_query(\"supplier_warehouse\", () => {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\tis_group: 0,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tfrm.set_query(\"warehouse\", \"items\", () => ({\n\t\t\tfilters: {\n\t\t\t\tcompany: frm.doc.company,\n\t\t\t\tis_group: 0,\n\t\t\t},\n\t\t}));\n\n\t\tfrm.set_query(\"rejected_warehouse\", \"items\", () => ({\n\t\t\tfilters: {\n\t\t\t\tcompany: frm.doc.company,\n\t\t\t\tis_group: 0,\n\t\t\t},\n\t\t}));\n\n\t\tfrm.set_query(\"expense_account\", \"items\", () => {\n\t\t\treturn {\n\t\t\t\tquery: \"erpnext.controllers.queries.get_expense_account\",\n\t\t\t\tfilters: { company: frm.doc.company },\n\t\t\t};\n\t\t});\n\n\t\tfrm.set_query(\"batch_no\", \"items\", (doc, cdt, cdn) => {\n\t\t\tvar row = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\titem: row.item_code,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tfrm.set_query(\"serial_and_batch_bundle\", \"items\", (doc, cdt, cdn) => {\n\t\t\treturn frm.events.get_serial_and_batch_bundle_filters(doc, cdt, cdn);\n\t\t});\n\n\t\tfrm.set_query(\"rejected_serial_and_batch_bundle\", \"items\", (doc, cdt, cdn) => {\n\t\t\treturn frm.events.get_serial_and_batch_bundle_filters(doc, cdt, cdn);\n\t\t});\n\n\t\tfrm.set_query(\"batch_no\", \"supplied_items\", (doc, cdt, cdn) => {\n\t\t\tvar row = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\titem: row.rm_item_code,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tfrm.set_query(\"serial_and_batch_bundle\", \"supplied_items\", (doc, cdt, cdn) => {\n\t\t\tlet row = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\titem_code: row.rm_item_code,\n\t\t\t\t\tvoucher_type: doc.doctype,\n\t\t\t\t\tvoucher_no: [\"in\", [doc.name, \"\"]],\n\t\t\t\t\tis_cancelled: 0,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t},\n\n\tget_serial_and_batch_bundle_filters: (doc, cdt, cdn) => {\n\t\tlet row = locals[cdt][cdn];\n\t\treturn {\n\t\t\tfilters: {\n\t\t\t\titem_code: row.item_code,\n\t\t\t\tvoucher_type: doc.doctype,\n\t\t\t\tvoucher_no: [\"in\", [doc.name, \"\"]],\n\t\t\t\tis_cancelled: 0,\n\t\t\t},\n\t\t};\n\t},\n\n\tsetup_quality_inspection: (frm) => {\n\t\tif (!frm.is_new() && frm.doc.docstatus === 0 && !frm.doc.is_return) {\n\t\t\tlet transaction_controller = new erpnext.TransactionController({ frm: frm });\n\t\t\ttransaction_controller.setup_quality_inspection();\n\t\t}\n\t},\n\n\tset_route_options_for_new_doc: (frm) => {\n\t\tlet batch_no_field = frm.get_docfield(\"items\", \"batch_no\");\n\t\tif (batch_no_field) {\n\t\t\tbatch_no_field.get_route_options_for_new_doc = (row) => {\n\t\t\t\treturn {\n\t\t\t\t\titem: row.doc.item_code,\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tlet item_sbb_field = frm.get_docfield(\"items\", \"serial_and_batch_bundle\");\n\t\tif (item_sbb_field) {\n\t\t\titem_sbb_field.get_route_options_for_new_doc = (row) => {\n\t\t\t\treturn {\n\t\t\t\t\titem_code: row.doc.item_code,\n\t\t\t\t\tvoucher_type: frm.doc.doctype,\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tlet rejected_item_sbb_field = frm.get_docfield(\"items\", \"rejected_serial_and_batch_bundle\");\n\t\tif (rejected_item_sbb_field) {\n\t\t\trejected_item_sbb_field.get_route_options_for_new_doc = (row) => {\n\t\t\t\treturn {\n\t\t\t\t\titem_code: row.doc.item_code,\n\t\t\t\t\tvoucher_type: frm.doc.doctype,\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tlet rm_sbb_field = frm.get_docfield(\"supplied_items\", \"serial_and_batch_bundle\");\n\t\tif (rm_sbb_field) {\n\t\t\trm_sbb_field.get_route_options_for_new_doc = (row) => {\n\t\t\t\treturn {\n\t\t\t\t\titem_code: row.doc.rm_item_code,\n\t\t\t\t\tvoucher_type: frm.doc.doctype,\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t},\n\n\treset_raw_materials_table: (frm) => {\n\t\tfrm.clear_table(\"supplied_items\");\n\n\t\tfrm.call({\n\t\t\tmethod: \"reset_raw_materials\",\n\t\t\tdoc: frm.doc,\n\t\t\tfreeze: true,\n\t\t\tcallback: (r) => {\n\t\t\t\tif (!r.exc) {\n\t\t\t\t\tfrm.save();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t},\n});\n\nfrappe.ui.form.on(\"Landed Cost Taxes and Charges\", {\n\tamount: (frm, cdt, cdn) => {\n\t\tset_missing_values(frm);\n\t\tfrm.events.set_base_amount(frm, cdt, cdn);\n\t},\n\n\texpense_account: (frm, cdt, cdn) => {\n\t\tfrm.events.set_account_currency(frm, cdt, cdn);\n\t},\n\n\tadditional_costs_remove: (frm) => {\n\t\tset_missing_values(frm);\n\t},\n});\n\nfrappe.ui.form.on(\"Subcontracting Receipt Item\", {\n\titem_code(frm) {\n\t\tset_missing_values(frm);\n\t},\n\n\tqty(frm) {\n\t\tset_missing_values(frm);\n\t},\n\n\trate(frm) {\n\t\tset_missing_values(frm);\n\t},\n\n\titems_delete: (frm) => {\n\t\tset_missing_values(frm);\n\t},\n\n\tadd_serial_batch_bundle(frm, cdt, cdn) {\n\t\tlet item = locals[cdt][cdn];\n\n\t\tfrappe.db.get_value(\"Item\", item.item_code, [\"has_batch_no\", \"has_serial_no\"]).then((r) => {\n\t\t\tif (r.message && (r.message.has_batch_no || r.message.has_serial_no)) {\n\t\t\t\titem.has_serial_no = r.message.has_serial_no;\n\t\t\t\titem.has_batch_no = r.message.has_batch_no;\n\t\t\t\titem.type_of_transaction = item.qty > 0 ? \"Inward\" : \"Outward\";\n\t\t\t\titem.is_rejected = false;\n\n\t\t\t\tnew erpnext.SerialBatchPackageSelector(frm, item, (r) => {\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tlet qty = Math.abs(r.total_qty);\n\t\t\t\t\t\tif (frm.doc.is_return) {\n\t\t\t\t\t\t\tqty = qty * -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet update_values = {\n\t\t\t\t\t\t\tserial_and_batch_bundle: r.name,\n\t\t\t\t\t\t\tuse_serial_batch_fields: 0,\n\t\t\t\t\t\t\tqty: qty / flt(item.conversion_factor || 1, precision(\"conversion_factor\", item)),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (r.warehouse) {\n\t\t\t\t\t\t\tupdate_values[\"warehouse\"] = r.warehouse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfrappe.model.set_value(item.doctype, item.name, update_values);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\n\tadd_serial_batch_for_rejected_qty(frm, cdt, cdn) {\n\t\tlet item = locals[cdt][cdn];\n\n\t\tfrappe.db.get_value(\"Item\", item.item_code, [\"has_batch_no\", \"has_serial_no\"]).then((r) => {\n\t\t\tif (r.message && (r.message.has_batch_no || r.message.has_serial_no)) {\n\t\t\t\titem.has_serial_no = r.message.has_serial_no;\n\t\t\t\titem.has_batch_no = r.message.has_batch_no;\n\t\t\t\titem.type_of_transaction = item.rejected_qty > 0 ? \"Inward\" : \"Outward\";\n\t\t\t\titem.is_rejected = true;\n\n\t\t\t\tnew erpnext.SerialBatchPackageSelector(frm, item, (r) => {\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tlet qty = Math.abs(r.total_qty);\n\t\t\t\t\t\tif (frm.doc.is_return) {\n\t\t\t\t\t\t\tqty = qty * -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet update_values = {\n\t\t\t\t\t\t\tserial_and_batch_bundle: r.name,\n\t\t\t\t\t\t\tuse_serial_batch_fields: 0,\n\t\t\t\t\t\t\trejected_qty:\n\t\t\t\t\t\t\t\tqty / flt(item.conversion_factor || 1, precision(\"conversion_factor\", item)),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (r.warehouse) {\n\t\t\t\t\t\t\tupdate_values[\"rejected_warehouse\"] = r.warehouse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfrappe.model.set_value(item.doctype, item.name, update_values);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n});\n\nfrappe.ui.form.on(\"Subcontracting Receipt Supplied Item\", {\n\tconsumed_qty(frm) {\n\t\tset_missing_values(frm);\n\t},\n\n\tadd_serial_batch_bundle(frm, cdt, cdn) {\n\t\tlet item = locals[cdt][cdn];\n\n\t\titem.item_code = item.rm_item_code;\n\t\titem.qty = item.consumed_qty;\n\t\titem.warehouse = frm.doc.supplier_warehouse;\n\t\tfrappe.db.get_value(\"Item\", item.item_code, [\"has_batch_no\", \"has_serial_no\"]).then((r) => {\n\t\t\tif (r.message && (r.message.has_batch_no || r.message.has_serial_no)) {\n\t\t\t\titem.has_serial_no = r.message.has_serial_no;\n\t\t\t\titem.has_batch_no = r.message.has_batch_no;\n\t\t\t\titem.type_of_transaction = item.qty > 0 ? \"Outward\" : \"Inward\";\n\t\t\t\titem.is_rejected = false;\n\n\t\t\t\tnew erpnext.SerialBatchPackageSelector(frm, item, (r) => {\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tlet qty = Math.abs(r.total_qty);\n\t\t\t\t\t\tif (frm.doc.is_return) {\n\t\t\t\t\t\t\tqty = qty * -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet update_values = {\n\t\t\t\t\t\t\tserial_and_batch_bundle: r.name,\n\t\t\t\t\t\t\tuse_serial_batch_fields: 0,\n\t\t\t\t\t\t\tconsumed_qty:\n\t\t\t\t\t\t\t\tqty / flt(item.conversion_factor || 1, precision(\"conversion_factor\", item)),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfrappe.model.set_value(item.doctype, item.name, update_values);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n});\n\nlet set_warehouse_in_children = (child_table, warehouse_field, warehouse) => {\n\tlet transaction_controller = new erpnext.TransactionController();\n\ttransaction_controller.autofill_warehouse(child_table, warehouse_field, warehouse);\n};\n\nlet set_missing_values = (frm) => {\n\tfrappe.call({\n\t\tdoc: frm.doc,\n\t\tmethod: \"set_missing_values\",\n\t\tcallback: (r) => {\n\t\t\tif (!r.exc) frm.refresh();\n\t\t},\n\t});\n};",
  "view": "Form"
 }
]